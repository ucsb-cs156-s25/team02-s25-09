import {
  Jr,
  Ro,
  ee
} from "./chunk-A2UQS4BV.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-YULXVUVA.js";
import "./chunk-MTI3AIJG.js";

// node_modules/@storybook/experimental-addon-test/dist/vitest-plugin/test-utils.mjs
import { server } from "@vitest/browser/context";
var MINIMAL_VIEWPORTS = { mobile1: { name: "Small mobile", styles: { height: "568px", width: "320px" }, type: "mobile" }, mobile2: { name: "Large mobile", styles: { height: "896px", width: "414px" }, type: "mobile" }, tablet: { name: "Tablet", styles: { height: "1112px", width: "834px" }, type: "tablet" } };
var DEFAULT_VIEWPORT_DIMENSIONS = { width: 1200, height: 900 };
var validPixelOrNumber = /^\d+(px)?$/;
var percentagePattern = /^(\d+(\.\d+)?%)$/;
var vwPattern = /^(\d+(\.\d+)?vw)$/;
var vhPattern = /^(\d+(\.\d+)?vh)$/;
var emRemPattern = /^(\d+)(em|rem)$/;
var parseDimension = (value, dimension) => {
  if (validPixelOrNumber.test(value)) return Number.parseInt(value, 10);
  if (percentagePattern.test(value)) {
    let percentageValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS[dimension] * percentageValue);
  } else if (vwPattern.test(value)) {
    let vwValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS.width * vwValue);
  } else if (vhPattern.test(value)) {
    let vhValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS.height * vhValue);
  } else {
    if (emRemPattern.test(value)) return Number.parseInt(value, 10) * 16;
    throw new ee({ dimension, value });
  }
};
var setViewport = async (parameters = {}, globals = {}) => {
  let defaultViewport, viewportsParam = parameters.viewport ?? {}, viewportsGlobal = globals.viewport ?? {}, isDisabled = viewportsParam.disable || viewportsParam.disabled;
  viewportsGlobal.value && !isDisabled ? defaultViewport = viewportsGlobal.value : isDisabled || (defaultViewport = viewportsParam.defaultViewport);
  let { page } = await import("@vitest/browser/context").catch(() => ({ page: null }));
  if (!page || !globalThis.__vitest_browser__) return;
  let viewports = { ...MINIMAL_VIEWPORTS, ...viewportsParam.viewports, ...viewportsParam.options }, viewportWidth = DEFAULT_VIEWPORT_DIMENSIONS.width, viewportHeight = DEFAULT_VIEWPORT_DIMENSIONS.height;
  if (defaultViewport && defaultViewport in viewports) {
    let styles = viewports[defaultViewport].styles;
    if ((styles == null ? void 0 : styles.width) && (styles == null ? void 0 : styles.height)) {
      let { width, height } = styles;
      viewportWidth = parseDimension(width, "width"), viewportHeight = parseDimension(height, "height");
    }
  }
  await page.viewport(viewportWidth, viewportHeight);
};
var { getInitialGlobals } = server.commands;
var testStory = (exportName, story, meta, skipTags) => async (context) => {
  let annotations = Jr(story, meta), composedStory = Ro(annotations.story, annotations.meta, { initialGlobals: await (getInitialGlobals == null ? void 0 : getInitialGlobals()) ?? {} }, annotations.preview ?? globalThis.globalProjectAnnotations, exportName);
  (composedStory === void 0 || (skipTags == null ? void 0 : skipTags.some((tag) => composedStory.tags.includes(tag)))) && context.skip(), context.story = composedStory;
  let _task = context.task;
  _task.meta.storyId = composedStory.id, await setViewport(composedStory.parameters, composedStory.globals), await composedStory.run(), _task.meta.reports = composedStory.reporting.reports;
};
export {
  testStory
};
//# sourceMappingURL=@storybook_experimental-addon-test_internal_test-utils.js.map
